-- create "Users" table link to auth.users
CREATE TABLE IF NOT EXISTS PUBLIC."Users" (
    id uuid NOT NULL DEFAULT auth.uid (),
    role text NOT NULL DEFAULT '' :: text,
    first_name text NULL DEFAULT '' :: text,
    last_name text NULL DEFAULT '' :: text,
    email text NOT NULL,
    CONSTRAINT AuthorizedUsers_pkey PRIMARY KEY (id)
) tablespace pg_default;

-- create "Students" table
CREATE TABLE IF NOT EXISTS PUBLIC."Students" (
    id uuid NOT NULL,
    first_name text NULL,
    last_name text NULL,
    email text NOT NULL,
    CONSTRAINT Students_pkey PRIMARY KEY (id),
    CONSTRAINT Students_email_key UNIQUE (email),
    CONSTRAINT Students_id_fkey FOREIGN KEY (id) REFERENCES "Users" (id) ON
    UPDATE
        CASCADE ON
    DELETE
        CASCADE
) tablespace pg_default;

-- create "Professors" table
CREATE TABLE IF NOT EXISTS PUBLIC."Professors" (
    id uuid NOT NULL,
    first_name text NULL,
    last_name text NULL,
    email text NOT NULL,
    CONSTRAINT Profesors_pkey PRIMARY KEY (id),
    CONSTRAINT Profesors_email_key UNIQUE (email),
    CONSTRAINT Profesors_id_fkey FOREIGN KEY (id) REFERENCES "Users" (id) ON
    UPDATE
        CASCADE ON
    DELETE
        CASCADE
) tablespace pg_default;

-- create "Admins" table
CREATE TABLE IF NOT EXISTS PUBLIC."Admins" (
    id uuid NOT NULL,
    first_name text NULL,
    last_name text NULL,
    email text NOT NULL,
    CONSTRAINT Admins_pkey PRIMARY KEY (id),
    CONSTRAINT Admins_email_key UNIQUE (email),
    CONSTRAINT Admins_id_fkey FOREIGN KEY (id) REFERENCES "Users" (id) ON
    UPDATE
        CASCADE ON
    DELETE
        CASCADE
) tablespace pg_default;

-- create "Templates" table
CREATE TABLE IF NOT EXISTS PUBLIC."Templates" (
    professor_id uuid NOT NULL,
    temp_name text NOT NULL,
    temp_description text NULL,
    temp_text text NOT NULL,
    CONSTRAINT Template_pkey PRIMARY KEY (professor_id),
    CONSTRAINT Templates_professor_id_fkey FOREIGN KEY (professor_id) REFERENCES "Professors" (id)
) tablespace pg_default;

-- create "Courses" table
CREATE TABLE IF NOT EXISTS PUBLIC."Courses" (
    id bigint generated BY DEFAULT AS identity,
    prefix text NOT NULL,
    code bigint NOT NULL,
    NAME text NOT NULL,
    section text NULL,
    semester text NOT NULL,
    YEAR bigint NOT NULL,
    CONSTRAINT Course_pkey PRIMARY KEY (id),
    CONSTRAINT unique_courses UNIQUE (prefix, code, NAME, section, semester, YEAR)
) tablespace pg_default;

-- create "StudentCourse" join table
CREATE TABLE IF NOT EXISTS PUBLIC."StudentCourse" (
    student_id uuid NOT NULL,
    course_id bigint NOT NULL,
    is_grader BOOLEAN NOT NULL,
    CONSTRAINT StudentCourse_pkey PRIMARY KEY (student_id, course_id),
    CONSTRAINT StudentCourse_course_id_fkey FOREIGN KEY (course_id) REFERENCES "Courses" (id),
    CONSTRAINT StudentCourse_student_id_fkey FOREIGN KEY (student_id) REFERENCES "Students" (id)
) tablespace pg_default;

-- create "ProfessorCourse" join table
CREATE TABLE IF NOT EXISTS PUBLIC."ProfessorCourse" (
    professor_id uuid NOT NULL,
    course_id bigint NOT NULL,
    CONSTRAINT ProfessorCourse_pkey PRIMARY KEY (professor_id, course_id),
    CONSTRAINT ProfessorCourse_course_id_fkey FOREIGN KEY (course_id) REFERENCES "Courses" (id),
    CONSTRAINT ProfessorCourse_professor_id_fkey FOREIGN KEY (professor_id) REFERENCES "Professors" (id)
) tablespace pg_default;

-- create "Assignments" table
CREATE TABLE IF NOT EXISTS PUBLIC."Assignments" (
    id bigint generated BY DEFAULT AS identity,
    course_id bigint NOT NULL,
    assignment_name text NOT NULL,
    CONSTRAINT Assignment_pkey PRIMARY KEY (id),
    CONSTRAINT Assignments_course_id_assignment_name_key UNIQUE (course_id, assignment_name),
    CONSTRAINT Assignments_course_id_fkey FOREIGN KEY (course_id) REFERENCES "Courses" (id)
) tablespace pg_default;

-- create "Appeals" table
CREATE TABLE IF NOT EXISTS PUBLIC."Appeals" (
    id bigint generated BY DEFAULT AS identity,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    assignment_id bigint NOT NULL,
    appeal_text text NOT NULL,
    is_open BOOLEAN NOT NULL,
    grade bigint NULL,
    CONSTRAINT Appeal_pkey PRIMARY KEY (id),
    CONSTRAINT Appeals_assignment_id_fkey FOREIGN KEY (assignment_id) REFERENCES "Assignments" (id)
) tablespace pg_default;

-- create "StudentAppeal" join table
CREATE TABLE IF NOT EXISTS PUBLIC."StudentAppeal" (
    student_id uuid NOT NULL,
    appeal_id bigint NOT NULL,
    CONSTRAINT StudentAppeal_pkey PRIMARY KEY (student_id, appeal_id),
    CONSTRAINT StudentAppeal_appeal_id_fkey FOREIGN KEY (appeal_id) REFERENCES "Appeals" (id),
    CONSTRAINT StudentAppeal_student_id_fkey FOREIGN KEY (student_id) REFERENCES "Students" (id)
) tablespace pg_default;

-- create "Messages" table
CREATE TABLE IF NOT EXISTS PUBLIC."Messages" (
    id bigint generated BY DEFAULT AS identity,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    sender_id uuid NOT NULL,
    recipient_id uuid NOT NULL,
    appeal_id bigint NOT NULL,
    message_text text NOT NULL,
    from_grader BOOLEAN NOT NULL,
    CONSTRAINT Message_pkey PRIMARY KEY (id),
    CONSTRAINT Messages_appeal_id_fkey FOREIGN KEY (appeal_id) REFERENCES "Appeals" (id),
    CONSTRAINT Messages_recipient_id_fkey FOREIGN KEY (recipient_id) REFERENCES "Users" (id),
    CONSTRAINT Messages_sender_id_fkey FOREIGN KEY (sender_id) REFERENCES "Users" (id)
) tablespace pg_default;